//TC - O(N)
//SC - O(1)
// Algorithmic Paradigm: Dynamic Programming 
// There is one more approach for calculating this problem using the 
// Valley-Peak approach i.e. take a variable profit and initialize it with 
// zero and then traverse through the array of price[] from (i+1)th position 
// whenever the initial position value is greater than the previous value 
// add it to variable profit.

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int price[] = {2,30,15,10,8,25,80};
    int n = sizeof(price)/sizeof(price[0]);
    int profit = 0;
    for(int i=1 ; i<n ; i++)
    {
        int sub = price[i]-price[i-1];
        if(sub>0)
            profit+=sub;
    }
    cout<<"Profit = "<<profit<<endl;
    return 0;
}
