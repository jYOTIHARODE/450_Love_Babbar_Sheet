// Sliding Window Maximum (Maximum of all subarrays of size k)
// Given an array and an integer K, 
// find the maximum for each and every contiguous subarray of size k.
// Input:            arr[] = {1, 2, 3, 1, 4, 5, 2, 3, 6}, K = 3 
// Output:           3 3 4 5 5 5 6
// Explanation: 
            // Maximum of 1, 2, 3 is 3
            // Maximum of 2, 3, 1 is 3
            // Maximum of 3, 1, 4 is 4
            // Maximum of 1, 4, 5 is 5
            // Maximum of 4, 5, 2 is 5 
            // Maximum of 5, 2, 3 is 5
            // Maximum of 2, 3, 6 is 6

//Method 1  -  The idea is very basic run a nested loop, the outer loop which will mark 
// the starting point of the subarray of length k, the inner loop will run from the starting 
// index to index+k, k elements from starting index and print the maximum element 
// among these k elements. 

#include<bits/stdc++.h>
using namespace std;

void print(int arr[] , int n, int k)
{
    int j, max;
    for(int i=0 ; i<=n-k ; i++)
    {
        max = arr[j];
        for(j=1 ; j<k ; j++)
        {
            if(arr[i+j]>max)
                max = arr[i+j];
        }
        cout<<max<<" ";
    }
}

int main()
{
    int arr[] = {1,2,3,4,5,6,7,8};
    int n = sizeof(arr)/sizeof(arr[0]);
    int k=3;
    print(arr,n,k);
    return 0;
}
