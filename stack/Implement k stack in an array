// // Method 1 (Divide the array in slots of size n/k)
// A simple way to implement k stacks is to divide the array in k slots/ 
// of size n/k each, and fix the slots for different stacks, i.e., 
// use arr[0] to arr[n/k-1] for first stack, and arr[n/k] to arr[2n/k-1] 
// for stack2 where arr[] is the array to be used to implement two stacks
//  and size of array be n.

// The problem with this method is inefficient use of array space. 
// A stack push operation may result in stack overflow even if 
// there is space available in arr[]. For example, say the k is 2 and array
// size (n) is 6 and we push 3 elements to first and do not push anything 
// to second second stack. When we push 4th element to first, 
// there will be overflow even if we have space for 3 more elements in array.

//Method 2 (A space efficient implementation)
// The idea is to use two extra arrays for efficient implementation of k stacks in an array. 
// For such large stacks, the extra space used is comparatively very less as 
// we use two integer arrays as extra space.
// Following are the two extra arrays are used:
// 1) top[]: This is of size k and stores indexes of top elements in all stacks.
// 2) next[]: This is of size n and stores indexes of next item for the items in array arr[]. 
    //   Here arr[] is actual array that stores k stacks.
// All entries in top[] are initialized as -1 to indicate that all stacks are empty. 
// All entries next[i] are initialized as i+1 because all slots are free initially 

#include<bits/stdc++.h>
using namespace std;

class kStacks
{
    int *arr;
    int *top;
    int *next;

    int n,k;
    int free;

public:
    kStacks(int k1,int n1)
    {
        k = k1;
        n = n1;
        arr = new int[n];
        top = new int[k];
        next = new int[n];

        //initialize all stacks as a empty
        for(int i=0 ; i<k;  i++)    top[i]=-1;
        //initialize all staks as empty
        free = 0;
        for(int i=0 ; i<n-1 ; i++) 
        {
            next[i] = i+1;
            next[n-1] = -1;
        }
    }

    bool isFull()
    {
        return free==-1;
    }

    bool isEmpty(int sn)
    {
        return top[sn]==-1;
    }

    void push(int item,int sn)
    {
        if(isFull())        
        {
            cout<<"Stack overflow"<<endl;
            return;
        }
        int i = free;
        free = next[i];
        next[i] = top[sn];
        top[sn] = i;
        arr[i]=item;
    }

    int pop(int sn)
    {
        if(isEmpty(sn))
        {
            cout<<"Stack Underflow"<<endl;
            return INT_MAX;
        }
        int i=top[sn];
        top[sn]=next[i];
        next[i]=free;
        free=i;
        return arr[i];
    }
};


int main()
{
    int k=3;//3 stacks
    int n=9;//size of array
    kStacks obj(k,n);

//stack2
    obj.push(15,2);
    obj.push(45,2);

//stack1
    obj.push(17,1);
    obj.push(49,1);
    obj.push(39,1);
//stack3
    obj.push(11,0);
    obj.push(9,0);
    obj.push(7,0);

    cout<<"Popped element from stack 2 is"<<obj.pop(2)<<endl;
    cout<<"Popped element from stack 2 is"<<obj.pop(1)<<endl;
    cout<<"Popped element from stack 2 is"<<obj.pop(3)<<endl;
    return 0;
}
